<UserControl x:Class="LCSC.App.Views.BotUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:appBehaviors="using:LCSC.App.Behaviors"
             xmlns:controls="using:CommunityToolkit.WinUI.Controls"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
             xmlns:local="using:LCSC.App.Views"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ui="using:CommunityToolkit.WinUI"
             mc:Ignorable="d">

    <Grid ColumnSpacing="16">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="600" />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid Background="{StaticResource AppColor1}"
              CornerRadius="8">
            <Grid.RowDefinitions>
                <RowDefinition Height="68" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid Padding="16">
                <StackPanel HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Orientation="Horizontal"
                            Spacing="8">
                    <FontIcon Glyph="&#xE756;" />
                    <TextBlock FontSize="16"
                               Text="BOT LOG" />
                </StackPanel>

                <StackPanel HorizontalAlignment="Right"
                            Orientation="Horizontal"
                            Spacing="4">
                    <Button Command="{x:Bind ViewModel.ConnectBotCommand, Mode=OneWay}"
                            Style="{ThemeResource AccentButtonStyle}"
                            Visibility="{x:Bind ViewModel.IsDisconnected, Mode=OneWay}">
                        <FontIcon Glyph="&#xE768;" />
                    </Button>
                    <Button Command="{x:Bind ViewModel.DisconnectBotCommand, Mode=OneWay}"
                            Visibility="{x:Bind ViewModel.IsConnected, Mode=OneWay}">
                        <FontIcon Glyph="&#xE71A;" />
                    </Button>
                </StackPanel>
            </Grid>
            <Grid Grid.Row="1"
                  Padding="16"
                  Background="#101010">
                <ScrollView x:Name="TextScrollViewer">
                    <RichTextBlock HorizontalAlignment="Stretch"
                                   VerticalAlignment="Stretch"
                                   FontFamily="Cascadia Mono">
                        <interactivity:Interaction.Behaviors>
                            <appBehaviors:ConsoleMirrorBehavior />
                        </interactivity:Interaction.Behaviors>
                    </RichTextBlock>
                </ScrollView>
            </Grid>
        </Grid>
        <Grid Grid.Column="1"
              RowSpacing="8"
              Visibility="{x:Bind ViewModel.IsConnected, Mode=OneWay}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <controls:SettingsExpander Description="Lista de configuraciones en uso por el bot"
                                       Header="Config"
                                       HeaderIcon="{ui:FontIcon Glyph=&#xE713;}">
                <StackPanel Orientation="Horizontal"
                            Spacing="8">
                    <ComboBox MinWidth="220"
                              ItemsSource="{x:Bind ViewModel.Guilds, Mode=OneWay}"
                              SelectedItem="{x:Bind ViewModel.SelectedGuild, Mode=TwoWay}" />
                    <Button Command="{x:Bind ViewModel.RefreshCommand}"
                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}">
                        <FontIcon Glyph="&#xE895;" />
                    </Button>
                </StackPanel>
            </controls:SettingsExpander>
            <controls:SettingsExpander Grid.Row="1"
                                       Description="Lista de acciones relacionadas con el ranking"
                                       Header="Ranking"
                                       HeaderIcon="{ui:FontIcon Glyph=&#xE902;}"
                                       IsExpanded="True">
                <controls:SettingsExpander.Items>
                    <controls:SettingsCard>
                        <controls:SettingsCard.Header>
                            <StackPanel Margin="0,16"
                                        Spacing="8">
                                <StackPanel Orientation="Horizontal"
                                            Spacing="8">
                                    <Button Command="{x:Bind ViewModel.UpdateAndDisplayRankCommand}"
                                            Content="Actualizar y mostrar"
                                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}"
                                            Style="{ThemeResource AccentButtonStyle}">
                                        <Button.CommandParameter>
                                            <x:Boolean>False</x:Boolean>
                                        </Button.CommandParameter>
                                    </Button>
                                    <Button Command="{x:Bind ViewModel.UpdateRankCommand}"
                                            Content="Actualizar"
                                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}" />
                                    <Button Command="{x:Bind ViewModel.UpdateRankForcedCommand}"
                                            Content="Actualizar (forzado)"
                                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}" />
                                    <Button Command="{x:Bind ViewModel.DisplayRankCommand}"
                                            Content="Mostrar"
                                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}">
                                        <Button.CommandParameter>
                                            <x:Boolean>False</x:Boolean>
                                        </Button.CommandParameter>
                                    </Button>
                                    <Button Command="{x:Bind ViewModel.DisplayRankCommand}"
                                            Content="Mostrar (Banned)"
                                            IsEnabled="{x:Bind ViewModel.IsRankingIdle, Mode=OneWay}">
                                        <Button.CommandParameter>
                                            <x:Boolean>True</x:Boolean>
                                        </Button.CommandParameter>
                                    </Button>
                                </StackPanel>
                                <StackPanel Orientation="Horizontal"
                                            Spacing="8">
                                    <Button Command="{x:Bind ViewModel.CancelUpdateRankCommand}"
                                            Content="Cancelar"
                                            IsEnabled="{x:Bind ViewModel.IsRankingBusy, Mode=OneWay}" />
                                </StackPanel>
                            </StackPanel>
                        </controls:SettingsCard.Header>
                    </controls:SettingsCard>
                    <controls:SettingsCard Description="Programe 'Actualizar y mostrar' para que se ejecute a la hora deseada."
                                           Header="Temporizador">
                        <ToggleSwitch IsOn="{x:Bind ViewModel.IsDispatcherRunning, Mode=TwoWay}" />
                    </controls:SettingsCard>
                    <controls:SettingsCard Header="Hora #1"
                                           IsEnabled="{x:Bind ViewModel.IsDispatcherRunning, Mode=OneWay}">
                        <TimePicker Time="{x:Bind ViewModel.ScheduleTime1, Mode=TwoWay}" />
                    </controls:SettingsCard>
                    <controls:SettingsCard Header="Hora #2"
                                           IsEnabled="{x:Bind ViewModel.IsDispatcherRunning, Mode=OneWay}">
                        <TimePicker Time="{x:Bind ViewModel.ScheduleTime2, Mode=TwoWay}" />
                    </controls:SettingsCard>
                </controls:SettingsExpander.Items>
            </controls:SettingsExpander>
            <controls:SettingsExpander Grid.Row="2"
                                       Description="Lista de opciones para enviar mensajes"
                                       Header="Mensajes"
                                       HeaderIcon="{ui:FontIcon Glyph=&#xEBDB;}"
                                       IsEnabled="False">
                <controls:SettingsExpander.Items>
                    <controls:SettingsCard>
                        <controls:SettingsCard.Header>
                            <StackPanel Margin="0,16"
                                        Spacing="8">
                                <StackPanel Orientation="Horizontal"
                                            Spacing="8">
                                    <Button Content="Test"
                                            Style="{ThemeResource AccentButtonStyle}" />
                                </StackPanel>
                            </StackPanel>
                        </controls:SettingsCard.Header>
                    </controls:SettingsCard>
                </controls:SettingsExpander.Items>
            </controls:SettingsExpander>
        </Grid>
    </Grid>
</UserControl>