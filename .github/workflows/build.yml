name: x86/x64 MSIX

on:
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  actions: write

env:
  Project_Name: 'LCSC.App'

jobs:
  build:
    runs-on: windows-latest
    env:
      DOTNET_VERSION: '9.0.x'
      Configuration: 'Release'
      Solution_Name: 'LCSC.sln'
      Appx_Package_Dir: '${{ github.workspace }}'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0

      - name: Update manifest version
        shell: pwsh
        run: |
          [xml]$manifest = Get-Content ".\${{ env.Project_Name }}\Package.appxmanifest"
          $manifest.Package.Identity.Version = "${{ steps.gitversion.outputs.MajorMinorPatch }}.0"
          $manifest.Save(".\${{ env.Project_Name }}\Package.appxmanifest")

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Restore
        shell: pwsh
        run: |
          msbuild ${{ env.Solution_Name }} `
            /t:Restore `
            /p:Configuration=${{ env.Configuration }}

      - name: Create appsettings.json from secrets
        shell: pwsh
        run: |
          $configDir = "LCSC.App\Assets\Config"
          New-Item -ItemType Directory -Force -Path $configDir | Out-Null

          # Fail fast if a required secret is missing
          $required = @{
            AIRBASE_TOKEN='${{ secrets.AIRBASE_TOKEN }}'
            AIRBASE_BASEID='${{ secrets.AIRBASE_BASEID }}'
            BNET_CLIENT_ID='${{ secrets.BNET_CLIENT_ID }}'
            BNET_CLIENT_SECRET='${{ secrets.BNET_CLIENT_SECRET }}'
            DISCORD_TOKEN='${{ secrets.DISCORD_TOKEN }}'
            DISCORD_CLIENT_SECRET='${{ secrets.DISCORD_CLIENT_SECRET }}'
            TELEMETRY_KEY='${{ secrets.TELEMETRY_KEY }}'
          }
          $missing = @()
          foreach($k in $required.Keys){ if([string]::IsNullOrWhiteSpace($required[$k])){ $missing += $k } }
          if($missing.Count -gt 0){ throw "Missing required secrets: $($missing -join ', ')" }

          $json = @{
            AirBaseSettings = @{
              token = "${{ secrets.AIRBASE_TOKEN }}"
              baseId = "${{ secrets.AIRBASE_BASEID }}"
            }
            BattleNetSettings = @{
              clientId = "${{ secrets.BNET_CLIENT_ID }}"
              clientSecret = "${{ secrets.BNET_CLIENT_SECRET }}"
            }
            DiscordSettings = @{
              token = "${{ secrets.DISCORD_TOKEN }}"
              clientSecret = "${{ secrets.DISCORD_CLIENT_SECRET }}"
            }
            TelemetryKey = @{
              key = "${{ secrets.TELEMETRY_KEY }}"
            }
          } | ConvertTo-Json -Depth 5

          Set-Content -Path (Join-Path $configDir 'appsettings.json') -Value $json -Encoding UTF8

      - name: Build x64 MSIX
        shell: pwsh
        run: |
          msbuild ${{ env.Solution_Name }} `
            /p:Configuration=${{ env.Configuration }} `
            /p:AppxBundle=Never `
            /p:AppxPackageDir="${{ env.Appx_Package_Dir }}\" `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:GenerateAppxPackageOnBuild=true `
            /p:AppxPackageSigningEnabled=false `
            /p:Platform=x64

      - name: Build x86 MSIX
        shell: pwsh
        run: |
          msbuild ${{ env.Solution_Name }} `
            /p:Configuration=${{ env.Configuration }} `
            /p:AppxBundle=Never `
            /p:AppxPackageDir="${{ env.Appx_Package_Dir }}\" `
            /p:UapAppxPackageBuildMode=StoreUpload `
            /p:GenerateAppxPackageOnBuild=true `
            /p:AppxPackageSigningEnabled=false `
            /p:Platform=x86

      - name: Set Package Vars
        id: set-package
        shell: pwsh
        run: |
          "X86=${{ env.Appx_Package_Dir }}\${{ env.Project_Name }}_${{ steps.gitversion.outputs.MajorMinorPatch }}.0_x86_Test" >> $env:GITHUB_OUTPUT
          "x64=${{ env.Appx_Package_Dir }}\${{ env.Project_Name }}_${{ steps.gitversion.outputs.MajorMinorPatch }}.0_x64_Test" >> $env:GITHUB_OUTPUT

      - name: Upload Msix x86
        uses: actions/upload-artifact@v4
        with:
          name: Msix-x86
          path: ${{ steps.set-package.outputs.x86 }}\*.msix

      - name: Upload Msix x64
        uses: actions/upload-artifact@v4
        with:
          name: Msix-x64
          path: ${{ steps.set-package.outputs.x64 }}\*.msix